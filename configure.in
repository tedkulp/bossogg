dnl Process this file with autoconf to produce a configure script.
AC_INIT(bosync)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(bossogg, 0.14.0-svn)

AC_ARG_ENABLE(vorbis,AC_HELP_STRING([--disable-vorbis],[Remove ogg vorbis support]),,enable_vorbis=yes)
AC_ARG_ENABLE(flac,AC_HELP_STRING([--disable-flac],[Remove flac support]),,enable_flac=yes)
AC_ARG_ENABLE(mp3,AC_HELP_STRING([--disable-mp3],[Remove mp3 support]),,enable_mp3=yes)
AC_ARG_ENABLE(id3,AC_HELP_STRING([--disable-id3],[Remove id3 metadata support]),,enable_id3=yes)
AC_ARG_ENABLE(shout,AC_HELP_STRING([--disable-shout],[Remove icecast2 streaming support]),,enable_shout=yes)
AC_ARG_ENABLE(oss_mixer,AC_HELP_STRING([--disable-oss-mixer],[Remove oss mixer support]),,enable_oss_mixer=yes)
AC_ARG_ENABLE(alsa_mixer,AC_HELP_STRING([--disable-alsa-mixer],[Remove alsa mixer support]),,enable_alsa_mixer=yes)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
#AC_PROG_RANLIB
AC_PROG_LIBTOOL

dnl Checks for library functions.
AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

AC_CHECK_FUNCS(dlopen, , [AC_CHECK_LIB(dl,dlopen, , [AC_MSG_ERROR([*** dlopen() not found.])])])

dnl Python stuff
AM_PATH_PYTHON(2.2)
PYTHON_LIB_FLAGS=`python-config`
LIBS="$LIBS $PYTHON_LIB_FLAGS"
PYTHON_INCLUDE_FLAGS=`python -c "import os,sys; print '-I' + os.path.join(sys.prefix, 'include', 'python' + sys.version[[:3]])"`
if test $prefix = NONE; then
	pythondir=`python -c "import os,sys; print os.path.join(sys.prefix, 'lib', 'python' + sys.version[[:3]], 'site-packages')"`
fi
PYTHON_PREFIX=`python -c "import os,sys; print sys.prefix"`
PYTHON_EXEC_PREFIX=`python -c "import os,sys; print sys.exec_prefix"`
CFLAGS="$CFLAGS $PYTHON_INCLUDE_FLAGS"

dnl PY_PROG_PYTHON()
dnl PY_PYTHON_VERSION()

AC_C_BIGENDIAN

dnl Check for sqlite
AC_MSG_CHECKING(for sqlite files)
dir=""
sqlitedir=""
for i in $dir /usr /usr/local
do
	if test -f $i/lib/libsqlite.a && test -f $i/include/sqlite.h;
	then
		AC_MSG_RESULT(sqlite libs: $i)
		sqlitedir=$i
		break
	fi
done

if test x$sqlitedir = x
then
	enable_sqlite=no
	AC_MSG_ERROR(Must have sqlite installed!!!)
else
	SQLITEDIR=${sqlitedir}

	LIBS="$LIBS -lsqlite -L$SQLITEDIR/lib"
	CFLAGS="$CFLAGS -I$SQLITEDIR/include"
fi

dnl Checks for libao
AM_PATH_AO(CFLAGS="$CFLAGS $AO_CFLAGS" LIBS="$LIBS $AO_LIBS",AC_MSG_ERROR(Must have libao installed!!!))

dnl Checks for libogg/libvorbis
if test $enable_vorbis = yes; then
	AM_PATH_OGG(CFLAGS="$CFLAGS $OGG_CFLAGS" LIBS="$LIBS $OGG_LIBS",enable_vorbis=no)
	AM_PATH_VORBIS(CFLAGS="$CFLAGS $VORBIS_CFLAGS $VORBISFILE_CFLAGS" LIBS="$LIBS $VORBIS_LIBS $VORBISFILE_LIBS" AC_DEFINE(HAVE_VORBIS,,Compile vorbis support),enable_vorbis=no)
	if test $enable_vorbis = no; then
		AC_MSG_WARN(Ogg/Vorbis libs not found... disabling ogg vorbis support)
	fi
fi

dnl Checks for libflac
if test $enable_flac = yes; then
	AM_PATH_LIBFLAC(CFLAGS="$CFLAGS $LIBFLAC_CFLAGS" LIBS="$LIBS $LIBFLAC_LIBS" AC_DEFINE(HAVE_FLAC,,Compile libflac support),enable_flac=no)
	if test $enable_flac = no; then
		AC_MSG_WARN(Flac libs not found... disabling flac support)
	fi
fi

dnl Check for mad
if test $enable_mp3 = yes; then
	AC_MSG_CHECKING(for libmad files)
	dir=""
	maddir=""
	for i in $dir /usr /usr/local
	do
		if test -f $i/lib/libmad.a && test -f $i/include/mad.h;
		then
			AC_MSG_RESULT(mad libs: $i)
			maddir=$i
			break
		fi
	done

	if test x$maddir = x
	then
		enable_mp3=no
		AC_MSG_WARN(Mad libs not found... disabling mp3 support)
	else
		MADDIR=${maddir}

		LIBS="$LIBS -lmad -L$MADDIR/lib"
		CFLAGS="$CFLAGS -I$MADDIR/include"
		AC_DEFINE(HAVE_MP3,,Compile libmad support)
	fi
fi

dnl Check for id3 tag support
if test $enable_id3 = yes; then
	AC_MSG_CHECKING(for libid3 files)
	dir=""
	id3dir=""
	for i in $dir /usr /usr/local
	do
		if test -f $i/lib/libid3.a && test -f $i/include/id3.h;
		then
			AC_MSG_RESULT(id3 libs: $i)
			id3dir=$i
			break
		fi
	done

	if test x$id3dir = x
	then
		enable_id3=no
		AC_MSG_WARN(ID3 libs not found... disabling id3 metadata support)
	else
		ID3DIR=${id3dir}

		LIBS="$LIBS -lid3 -lz -lstdc++ -L$ID3DIR/lib"
		CFLAGS="$CFLAGS -I$ID3DIR/include"
		AC_DEFINE(HAVE_ID3,,Compile libid3 support)
	fi
fi

dnl Checks for libshout2
if test $enable_shout = yes; then
	if test $enable_vorbis = yes; then
		XIPH_PATH_SHOUT(AC_DEFINE(HAVE_SHOUT,,Compile libshout2 support),enable_shout=no)
		if test $enable_shout = no; then
			AC_MSG_WARN(Shout libs not found... disabling icecast streaming support)
		else
			CFLAGS="$CFLAGS $SHOUT_CFLAGS"
			LIBS="$LIBS $SHOUT_LIBS -lvorbisenc"
		fi
	else
		enable_shout=no
		AC_MSG_WARN(Vorbis not enabled... disabling icecast streaming support)
	fi
fi

dnl Check for OSS mixer support
if test $enable_oss_mixer = yes; then
	AC_CHECK_HEADER(sys/soundcard.h,CFLAGS="$CFLAGS" AC_DEFINE(HAVE_OSS_MIXER,,Compile oss mixer support),[CFLAGS="$CFLAGS";AC_MSG_WARN(OSS mixer headers not found -- disabling)])
	if test $enable_oss_mixer = no; then
		AC_MSG_WARN(OSS mixer libs not found... disabling support)
	fi
fi

CPPFLAGS="$CFLAGS"

AM_CONDITIONAL(MP3_OPT, test x$enable_mp3 = xyes)
AM_CONDITIONAL(OGG_OPT, test x$enable_vorbis = xyes)
AM_CONDITIONAL(FLAC_OPT, test x$enable_flac = xyes)
AM_CONDITIONAL(ID3_OPT, test x$enable_id3 = xyes)
AM_CONDITIONAL(SHOUT_OPT, test x$enable_shout = xyes)
AM_CONDITIONAL(OSS_MIXER_OPT, test x$enable_oss_mixer = xyes)
AM_CONDITIONAL(ALSA_MIXER_OPT, test x$enable_alsa_mixer = xyes)

AC_OUTPUT(Makefile boss3/Makefile boss3/bossao/Makefile boss3/bossao2/Makefile boss3/metadata/Makefile)

